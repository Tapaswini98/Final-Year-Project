<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Dashboard | Live Chart</title>

  <%- include("./partials/header") %>

</head>

<body class="hold-transition sidebar-mini">
  <script src="plugins/chart.js/canvasjs.min.js"></script>
  <script type="text/javascript" src="js/loader.js"></script>
  <div class="wrapper">
    <%- include("./partials/navbar") %>
    <%- include("./partials/sidebar") %>

    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
      <!-- Content Header (Page header) -->
      <section class="content-header">
        <div class="container-fluid">
          <div class="row mb-2">
            <div class="col-sm-6" id="dynamicDrop">
              <select class="form-control" id="dynamicOption" style="display: none;" onchange="selectChart()">

              </select>
              <h1 id="zoneName" style="display: block;"></h1>
            </div>
            <div class="col-sm-6">
              <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item">
                  <a href="#"><i>Home</i></a>
                </li>
                <li class="breadcrumb-item active">DMA LIVE CHART</li>
              </ol>
            </div>
          </div>
        </div>
        <!-- /.container-fluid -->
      </section>

      <!-- Main content -->
      <section class="content">
        <div class="container-fluid">
          <div class="row">
            <div class="col-md-12">
              <!-- LINE CHART -->
              <div class="card card-info">
                <div class="card-header">
                  <h3 class="card-title" id="chartHead">
                  </h3>
                  <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                      <i class="fas fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-tool" data-card-widget="remove">
                      <i class="fas fa-times"></i>
                    </button>
                  </div>
                </div>
                <div class="card-body">
                  <div class="chart">
                    <!-- <canvas id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas> -->

                    <div id="chartContainer" style="height: 300px"></div>
                  </div>
                </div>
                <!-- /.card-body -->
              </div>
              <div class="card-body">
                <div class="chart">
                  <!-- <canvas id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas> -->
                  <div id="chartContainer" style="height: 500px; width: 100%"></div>
                </div>
              </div>
              <!-- /.card-body -->
            </div>
            <!-- /.card -->
          </div>
          <!--col-->
        </div>
        <!-- /.row -->
    </div>
    <!-- /.container-fluid -->
    </section>
    <!-- /.content -->
  </div>
  <!-- /.content-wrapper -->

  <!-- Control Sidebar -->
  <aside class="control-sidebar control-sidebar-dark">
    <!-- Add Content Here -->
  </aside>
  <!-- /.control-sidebar -->
  </div>
  <script>
    let dynamicDrop = document.getElementById("dynamicDrop");
    let option = document.getElementById("dynamicOption");
    let role = JSON.parse(sessionStorage.getItem("user")).role;
    if (role == "ADMIN") {
      option.style.display = "block";
      document.getElementById("zoneName").style.display = "none";
      let sessionData = JSON.parse(
        JSON.parse(sessionStorage.getItem("user")).plcs
      );
      console.log(sessionData);
      let innerHTML = "";
      sessionData.forEach((a) => {
        let locationName = a.location.toUpperCase();
        innerHTML += `<option value="${a.plcId}">LIVE ANALYTICAL CHART FOR ${locationName}</option>`;
      });
      option.innerHTML = innerHTML;
      setInterval(() => {
        selectChart();
      }, 1000);
    } else {
      document.getElementById("chartHead").innerText =
        "LIVE ANALYTICAL CHART FOR " +
        JSON.parse(sessionStorage.getItem("user")).location.toUpperCase() +
        " ZONE";
      document.getElementById("zoneName").innerText =
        JSON.parse(sessionStorage.getItem("user")).location.toUpperCase() +
        " ZONE";

      setInterval(() => {
        staticChat();
      }, 1000);
    }

    function selectChart() {
      JSON.parse(JSON.parse(sessionStorage.getItem("user")).plcs).forEach(
        (a) => {
          if (a.plcId == document.getElementById("dynamicOption").value) {
            document.getElementById("chartHead").innerText =
              "LIVE ANALYTICAL CHART FOR " +
              a.location.toUpperCase() +
              " ZONE";
          }
        }
      );
      async function getData() {
        let d1 = [];
        let d2 = [];
        let d3 =[];
        let plcId = {};
        // console.log(selectPlcID);

        plcId = {
          plcId: document.getElementById("dynamicOption").value,
          limit:250
        };
        console.log(plcId);

        console.log(plcId);
        // if (selectPlcID == null) {
        let res = await fetch("http://localhost:3000/zoneplclivedatas", {
          method: "POST",
          body: JSON.stringify(plcId),
          headers: {
            "Content-type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            return data;
          });
        // console.log(res);
        res.forEach((b) => {
          var obj = {};
          obj.x = new Date(b.date_time);
          obj.y = parseFloat(b.esr_presure);
          d1.push(obj);
        });
        res.forEach((b) => {
          var obj = {};
          obj.x = new Date(b.date_time);
          obj.y = parseFloat(b.main_meter_flow);
          d2.push(obj);
        });
        res.forEach((c) => {
          var obj = {};
          obj.x = new Date(c.date_time);
          obj.y = parseFloat(c.esr_level);
          d3.push(obj);
        });
        console.log(d1, d2);
        return {
          d1: d1,
          d2: d2,
          d3:d3
        };
        // }
      }
      const arr = getData().then((value) => {
        let data1 = value.d1;
        let data2 = value.d2;
        let data3 = value.d3;

        var chart = new CanvasJS.Chart("chartContainer", {
          title: {
            text: "",
          },
          axisY: [
            {
              title: "Flow m^3/h",
              lineColor: "blue",
              tickColor: "blue",
              labelFontColor: "blue",
              titleFontColor: "blue",
              includeZero: true,
            },
          ],
          axisY2: {
            title: "Pressure Kg/cm^2 & Level in M",
            lineColor: "red",
            tickColor: "red",
            labelFontColor: "red",
            titleFontColor: "red",
            includeZero: true,
          },
          toolTip: {
            shared: true,
          },
          legend: {
            cursor: "pointer",
            itemclick: toggleDataSeries,
          },
          data: [
            {
              type: "spline",
              fillOpacity: .3,
              name: "Flow",
              color: "blue",
              axisYIndex: 0,
              showInLegend: true,
              dataPoints: data2,
              markerType: "none",
            },
            {
              type: "spline",
              fillOpacity: .3,
              name: "Pressure",
              color: "red",
              axisYType: "secondary",
              showInLegend: true,
              dataPoints: data1,
              markerType: "none",
            },
            {
              type: "spline",
              fillOpacity: .3,
              name: "Level",
              color: "yellow",
              axisYType: "secondary",
              showInLegend: true,
              dataPoints: data3,
              markerType: "none",
            },
          ],
        });

        chart.render();

        function toggleDataSeries(e) {
          if (
            typeof e.dataSeries.visible === "undefined" ||
            e.dataSeries.visible
          ) {
            e.dataSeries.visible = false;
          } else {
            e.dataSeries.visible = true;
          }
          e.chart.render();
        }
      });
    }

   

    function staticChat() {
      async function getData() {
        let d1 = [];
        let d2 = [];
        let d3 = [];
        let plcId = {};
        // console.log(selectPlcID);
        if (JSON.parse(sessionStorage.getItem("user")).role == "ADMIN") {
          plcId = {
            plcId: document.getElementById("dynamicOption").value,
            limit: 250
          };
          console.log(plcId);
        } else {
          plcId = {
            plcId: JSON.parse(sessionStorage.getItem("user")).plcId,
            limit: 250
          };
        }
        //console.log(plcId);
        // if (selectPlcID == null) {
        let res = await fetch("http://localhost:3000/zoneplclivedatas", {
            method: "POST",
            body: JSON.stringify(plcId),
            headers: {
              "Content-type": "application/json",
            },
          })
          .then((response) => response.json())
          .then((data) => {
            return data;
          });
        console.log(res);
        res.forEach((b) => {
          var obj = {};
          obj.x = new Date(b.date_time);
          obj.y = parseFloat(b.esr_presure);
          d1.push(obj);
        });
        res.forEach((b) => {
          var obj = {};
          obj.x = new Date(b.date_time);
          obj.y = parseFloat(b.main_meter_flow);
          d2.push(obj);
        });
        res.forEach((c) => {
          var obj = {};
          obj.x = new Date(c.date_time);
          obj.y = parseFloat(c.esr_level);
          d3.push(obj);
        });
        // console.log(d1, d2);
        return {
          d1: d1,
          d2: d2,
          d3: d3
        };
        // }
      }

      const arr = getData().then((value) => {
        let data1 = value.d1;
        let data2 = value.d2;
        let data3 = value.d3;

        var chart = new CanvasJS.Chart("chartContainer", {
          title: {
            text: "",
          },
          axisY: [{
            title: "Flow m^3/h",
            lineColor: "blue",
            tickColor: "blue",
            labelFontColor: "blue",
            titleFontColor: "blue",
            includeZero: true,
          }, ],
          axisY2: {
            title: "Pressure Kg/cm^2",
            lineColor: "red",
            tickColor: "red",
            labelFontColor: "red",
            titleFontColor: "red",
            includeZero: true,
          },
          toolTip: {
            shared: true,
          },
          legend: {
            cursor: "pointer",
            itemclick: toggleDataSeries,
          },
          data: [{
              type: "spline",
              name: "Flow m^3/h",
              color: "blue",
              axisYIndex: 0,
              showInLegend: true,
              dataPoints: data2,
              markerType: "none",
            },
            {
              type: "spline",
              name: "Pressure Kg/cm^2",
              color: "red",
              axisYType: "secondary",
              showInLegend: true,
              dataPoints: data1,
              markerType: "none",
            },
            {
              type: "spline",
              name: "Level in M",
              color: "yellow",
              axisYType: "secondary",
              showInLegend: true,
              dataPoints: data3,
              markerType: "none",
            },
          ],
        });

        chart.render();

        function toggleDataSeries(e) {
          if (
            typeof e.dataSeries.visible === "undefined" ||
            e.dataSeries.visible
          ) {
            e.dataSeries.visible = false;
          } else {
            e.dataSeries.visible = true;
          }
          e.chart.render();
        }
      });
    }
  </script>
  <!-- ./wrapper -->
  <%- include("./partials/footer") %>
</body>

</html>