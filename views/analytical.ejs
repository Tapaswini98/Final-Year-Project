<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Dashboard | Live Chart</title>

  <%- include("./partials/header") %>

</head>

<body class="hold-transition sidebar-mini">
  <script src="plugins/chart.js/canvasjs.min.js"></script>
  <div class="wrapper">
    <%- include("./partials/navbar") %>
    <%- include("./partials/sidebar") %>

    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
      <!-- Content Header (Page header) -->
      <section class="content-header">
        <div class="container-fluid">
          <div class="row mb-2">
            <div class="col-sm-6" id="dynamicDrop">
              <select class="form-control" id="dynamicOption" style="display: none;" onchange="selectChart()">

              </select>
              <h1 id="zoneName" style="display: block;"></h1>
            </div>
            <div class="col-sm-6">
              <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item">
                  <a href="#"><i>Home</i></a>
                </li>
                <li class="breadcrumb-item active">DMA LIVE CHART</li>
              </ol>
            </div>
          </div>
        </div>
        <!-- /.container-fluid -->
      </section>

      <!-- Main content -->
      <section class="content">
        <div class="container-fluid">
          <div class="row">
            <div class="col-md-12">
              <!-- LINE CHART -->
              <div class="card card-info">
                <div class="card-header">
                  <h3 class="card-title" id="chartHead">
                  </h3>
                  <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                      <i class="fas fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-tool" data-card-widget="remove">
                      <i class="fas fa-times"></i>
                    </button>
                  </div>
                </div>
                <div class="card-body">
                  <div class="chart">
                    <!-- <canvas id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas> -->

                    <div id="chartContainer" style="height: 300px"></div>
                  </div>
                </div>
                <!-- /.card-body -->
              </div>
              <div class="card-body">
                <div class="chart">
                  <!-- <canvas id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas> -->
                  <div id="chartContainer" style="height: 500px; width: 100%"></div>
                </div>
              </div>
              <!-- /.card-body -->
            </div>
            <!-- /.card -->
          </div>
          <!--col-->
        </div>
        <!-- /.row -->
    </div>
    <!-- /.container-fluid -->
    </section>
    <!-- /.content -->
  </div>
  <!-- /.content-wrapper -->

  <!-- Control Sidebar -->
  <aside class="control-sidebar control-sidebar-dark">
    <!-- Add Content Here -->
  </aside>
  <!-- /.control-sidebar -->
  </div>
  <script>
    let dynamicDrop = document.getElementById("dynamicDrop")
    let option = document.getElementById("dynamicOption");
    let role = JSON.parse(sessionStorage.getItem('user')).role
    console.log(role)
    if (role == "ADMIN") {
      option.style.display = "block";
      document.getElementById("zoneName").style.display = "none";
      let sessionData = JSON.parse(JSON.parse(sessionStorage.getItem('user')).plcs);
      console.log(sessionData);
      let innerHTML = "";
      sessionData.forEach((a) => {
        innerHTML += `<option value="${a.plcId}">${a.location}</option>`
      })
      option.innerHTML = innerHTML;

    } else {
      document.getElementById("chartHead").innerText = "LIVE ANALYTICAL CHART FOR " + ((JSON.parse(sessionStorage
        .getItem(
          "user"))).location).toUpperCase() + " ZONE"
      document.getElementById("zoneName").innerText = ((JSON.parse(sessionStorage.getItem("user"))).location)
        .toUpperCase() + " ZONE"
    }
  </script>
  <script>
    // let selectPlcID = "";
    // function selectPlcId() {
    //   selectPlcID = document.getElementById("dynamicOption").value;
    //   console.log(selectPlcID);
    //   getData(selectPlcID);
    // }
    // console.log(selectPlcID);
    function selectChart() {
      document.getElementById("chartHead").innerText = "LIVE ANALYTICAL CHART FOR " + document.getElementById(
        "dynamicOption").value.toUpperCase() + " ZONE"
      document.getElementById("zoneName").innerText = document.getElementById("dynamicOption").value.toUpperCase() +
        " ZONE"
      async function getData() {
        let d1 = [];
        let d2 = [];
        let plcId = {};
        // console.log(selectPlcID);

        plcId = {
          plcId: document.getElementById("dynamicOption").value,
        }
        console.log(plcId);

        console.log(plcId);
        // if (selectPlcID == null) {
        let res = await fetch("http://localhost:3000/zoneplclivedatas", {
            method: "POST",
            body: JSON.stringify(plcId),
            headers: {
              "Content-type": "application/json",
            },
          })
          .then((response) => response.json())
          .then((data) => {
            return data;
          });
        // console.log(res);
        res.forEach((b) => {
          var obj = {};
          obj.x = new Date(b.date_time);
          obj.y = parseFloat(b.esr_presure);
          d1.push(obj);
        });
        res.forEach((b) => {
          var obj = {};
          obj.x = new Date(b.date_time);
          obj.y = parseFloat(b.main_meter_flow);
          d2.push(obj);
        });
        // console.log(d1, d2);
        return {
          d1: d1,
          d2: d2,
        };
        // }
      }
      const arr = getData().then((value) => {
        let data1 = value.d1;
        let data2 = value.d2;

        console.log(data1, data2);

        var chart = new CanvasJS.Chart("chartContainer", {
          title: {
            text: "",
          },
          axisY: [{
            title: "Flow",
            lineColor: "blue",
            tickColor: "blue",
            labelFontColor: "blue",
            titleFontColor: "blue",
            includeZero: true,
          }, ],
          axisY2: {
            title: "Pressure",
            lineColor: "red",
            tickColor: "red",
            labelFontColor: "red",
            titleFontColor: "red",
            includeZero: true,
          },
          toolTip: {
            shared: true,
          },
          legend: {
            cursor: "pointer",
            itemclick: toggleDataSeries,
          },
          data: [{
              type: "line",
              name: "Flow",
              color: "blue",
              axisYIndex: 0,
              showInLegend: true,
              dataPoints: data1,
            },
            {
              type: "line",
              name: "Pressure",
              color: "red",
              axisYType: "secondary",
              showInLegend: true,
              dataPoints: data2,
            },
          ],
        });
        chart.render();

        function toggleDataSeries(e) {
          if (
            typeof e.dataSeries.visible === "undefined" ||
            e.dataSeries.visible
          ) {
            e.dataSeries.visible = false;
          } else {
            e.dataSeries.visible = true;
          }
          e.chart.render();
        }

      });
       //setInterval(getData(),1000);
    }
    window.onload = function () {
	var dataPoints = [{y : 10}, {y : 13}, {y : 18}, {y : 20}, {y : 17}];
	var chart = new CanvasJS.Chart("chartContainer", {
			// title : {
			// 	text : "Dynamic Data"
			// },
			data : [{
					type : "spline",
					dataPoints : dataPoints
				}
			]
		});

	chart.render();
	
	var yVal = 15, updateCount = 0;
	var updateChart = function () {

		yVal = yVal + Math.round(5 + Math.random() * (-5 - 5));
      	updateCount++;
		
		dataPoints.push({
			y : yVal
		});
      	
        // chart.options.title.text = "Update " + updateCount;
		chart.render();    
		
	};

	// update chart every second
	setInterval(function(){updateChart()}, 1);
}	
    // async function getData() {
    //   let d1 = [];
    //   let d2 = [];
    //   let plcId = {};
    //   // console.log(selectPlcID);
    //   if (JSON.parse(sessionStorage.getItem("user")).role == "ADMIN") {
    //     plcId = {
    //       plcId: document.getElementById("dynamicOption").value,
    //     };
    //     console.log(plcId);
    //   } else {
    //     plcId = {
    //       plcId: JSON.parse(sessionStorage.getItem("user")).plcId,
    //     };
    //   }
    //   console.log(plcId);
    //   // if (selectPlcID == null) {
    //   let res = await fetch("http://localhost:3000/zoneplclivedatas", {
    //       method: "POST",
    //       body: JSON.stringify(plcId),
    //       headers: {
    //         "Content-type": "application/json",
    //       },
    //     })
    //     .then((response) => response.json())
    //     .then((data) => {
    //       return data;
    //     });
    //   // console.log(res);
    //   res.forEach((b) => {
    //     var obj = {};
    //     obj.x = new Date(b.date_time);
    //     obj.y = parseFloat(b.esr_presure);
    //     d1.push(obj);
    //   });
    //   res.forEach((b) => {
    //     var obj = {};
    //     obj.x = new Date(b.date_time);
    //     obj.y = parseFloat(b.main_meter_flow);
    //     d2.push(obj);
    //   });
    //   // console.log(d1, d2);
    //   return {
    //     d1: d1,
    //     d2: d2,
    //   };
    //   // }
    // }
    // const arr =  getData().then((value) => {
    //   let data1 = value.d1;
    //   let data2 = value.d2;

    //   // console.log(data1, data2);
    //   window.onload = function () {
    //     var chart = new CanvasJS.Chart("chartContainer", {
    //       title: {
    //         text: "",
    //       },
    //       axisY: [{
    //         title: "Flow",
    //         lineColor: "blue",
    //         tickColor: "blue",
    //         labelFontColor: "blue",
    //         titleFontColor: "blue",
    //         includeZero: true,
    //       }, ],
    //       axisY2: {
    //         title: "Pressure",
    //         lineColor: "red",
    //         tickColor: "red",
    //         labelFontColor: "red",
    //         titleFontColor: "red",
    //         includeZero: true,
    //       },
    //       toolTip: {
    //         shared: true,
    //       },
    //       legend: {
    //         cursor: "pointer",
    //         itemclick: toggleDataSeries,
    //       },
    //       data: [{
    //           type: "line",
    //           name: "Flow",
    //           color: "blue",
    //           axisYIndex: 0,
    //           showInLegend: true,
    //           dataPoints: data1,
    //         },
    //         {
    //           type: "line",
    //           name: "Pressure",
    //           color: "red",
    //           axisYType: "secondary",
    //           showInLegend: true,
    //           dataPoints: data2,
    //         },
    //       ],
    //     });
    //     chart.render();

    //     function toggleDataSeries(e) {
    //       if (
    //         typeof e.dataSeries.visible === "undefined" ||
    //         e.dataSeries.visible
    //       ) {
    //         e.dataSeries.visible = false;
    //       } else {
    //         e.dataSeries.visible = true;
    //       }
    //       e.chart.render();
    //     }
    //   };
    // });
    //setInterval(getData,1000);
    //setInterval(function(){updateChart()}, 1000);
  </script>
  <!-- ./wrapper -->
  <%- include("./partials/footer") %>
</body>

</html>